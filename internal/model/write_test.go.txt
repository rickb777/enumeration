package model

import (
	"io"
	"strings"
	"testing"

	"github.com/rickb777/enumeration/v3/enum"
	"github.com/rickb777/enumeration/v3/internal/transform"
	"github.com/rickb777/enumeration/v3/internal/util"
)

const head0 = `// generated code - do not edit
// github.com/rickb777/enumeration/v3 `

const head1 = `

package confectionary

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/rickb777/enumeration/v3/enum"
	"strconv"
	"strings"
)
`

func TestWriteHead(t *testing.T) {
	expected := head0 + util.Version + head1
	testStage(t, unsnake(basicModel()).writeHead, expected)
}

//-------------------------------------------------------------------------------------------------

const AllSweets_simple = `
// AllSweets lists all 5 values in order.
var AllSweets = []Sweet{
	Mars, Bounty, Snickers, Kitkat,
	Dairy_Milk,
}

// AllSweetEnums lists all 5 values in order.
var AllSweetEnums = enum.IntEnums{
	Mars, Bounty, Snickers, Kitkat,
	Dairy_Milk,
}
`

const AllSweets_prefixed = `
// AllSweets lists all 5 values in order.
var AllSweets = []Sweet{
	AMarsBar, ABountyBar, ASnickersBar, AKitkatBar,
	ADairy_MilkBar,
}

// AllSweetEnums lists all 5 values in order.
var AllSweetEnums = enum.FloatEnums{
	AMarsBar, ABountyBar, ASnickersBar, AKitkatBar,
	ADairy_MilkBar,
}
`

func TestWriteAllItems(t *testing.T) {
	testStage(t, unsnake(basicModel()).writeAllItems, AllSweets_simple)
	testStage(t, unsnake(basicModel()).writeAllItems, AllSweets_simple)
	testStage(t, floatModelWithPrefixes().writeAllItems, AllSweets_prefixed)
}

//-------------------------------------------------------------------------------------------------

const enumStrings_nc = `
const (
	sweetEnumStrings = "MarsBountySnickersKitkatDairy_Milk"
)

var (
	sweetEnumIndex = [...]uint16{0, 4, 10, 18, 24, 34}
)
`

const enumStrings_nc_unsnake = `
const (
	sweetEnumStrings = "MarsBountySnickersKitkatDairy Milk"
)

var (
	sweetEnumIndex = [...]uint16{0, 4, 10, 18, 24, 34}
)
`

const enumStrings_lc = `
const (
	sweetEnumStrings = "marsbountysnickerskitkatdairy_milk"
)

var (
	sweetEnumIndex = [...]uint16{0, 4, 10, 18, 24, 34}
)
`

const enumStrings_lc_unsnake = `
const (
	sweetEnumStrings = "marsbountysnickerskitkatdairy milk"
)

var (
	sweetEnumIndex = [...]uint16{0, 4, 10, 18, 24, 34}
)
`

const enumStrings_ic = `
const (
	sweetEnumStrings = "MarsBountySnickersKitkatDairy_Milk"
	sweetEnumInputs  = "marsbountysnickerskitkatdairy_milk"
)

var (
	sweetEnumIndex = [...]uint16{0, 4, 10, 18, 24, 34}
)
`

const enumStrings_tagged_nc = `
const (
	sweetEnumStrings = "MarsBountySnickersKitkatDairy_Milk"
	sweetEnumInputs  = "marsbountysnickerskitkatdairy_milk"
	sweetJSONStrings = "mmmbbbssskkkddd"
	sweetJSONInputs  = "mmmbbbssskkkddd"
	sweetSQLStrings  = "mbskd"
	sweetSQLInputs   = "mbskd"
)

var (
	sweetEnumIndex = [...]uint16{0, 4, 10, 18, 24, 34}
	sweetJSONIndex = [...]uint16{0, 3, 6, 9, 12, 15}
	sweetSQLIndex = [...]uint16{0, 1, 2, 3, 4, 5}
)
`

func TestWriteJoinedStringAndIndexes(t *testing.T) {
	testStage(t, basicModel().writeJoinedStringAndIndexes, enumStrings_nc)
	testStage(t, unsnake(basicModel()).writeJoinedStringAndIndexes, enumStrings_nc_unsnake)
	testStage(t, lowerCase(floatModelWithPrefixes()).writeJoinedStringAndIndexes, enumStrings_lc)
	testStage(t, lowerCase(unsnake(floatModelWithPrefixes())).writeJoinedStringAndIndexes, enumStrings_lc_unsnake)
	testStage(t, ignoreCase(basicModel()).writeJoinedStringAndIndexes, enumStrings_ic)
	testStage(t, ignoreCase(modelWithStructTags()).writeJoinedStringAndIndexes, enumStrings_tagged_nc)
}

//-------------------------------------------------------------------------------------------------

const toString_int = `
func (v Sweet) toString(concats string, indexes []uint16) string {
	o := v.Ordinal()
	if o < 0 || o >= len(AllSweets) {
		return fmt.Sprintf("Sweet(%d)", v)
	}
	return concats[indexes[o]:indexes[o+1]]
}
`

const toString_float = `
func (v Sweet) toString(concats string, indexes []uint16) string {
	o := v.Ordinal()
	if o < 0 || o >= len(AllSweets) {
		return fmt.Sprintf("Sweet(%g)", v)
	}
	return concats[indexes[o]:indexes[o+1]]
}
`

func TestWriteLiteralMethod(t *testing.T) {
	testStage(t, basicModel().writeToStringMethod, toString_int)
	testStage(t, floatModelWithPrefixes().writeToStringMethod, toString_float)
}

//-------------------------------------------------------------------------------------------------

const String_all = `
// String returns the literal string representation of a Sweet, which is
// the same as the const identifier but without prefix or suffix.
func (v Sweet) String() string {
	return v.toString(sweetEnumStrings, sweetEnumIndex[:])
}
`

func TestWriteStringMethod(t *testing.T) {
	testStage(t, basicModel().writeStringMethod, String_all)
}

//-------------------------------------------------------------------------------------------------

const ordinal_no_prefix = `
// Ordinal returns the ordinal number of a Sweet. This is an integer counting
// from zero. It is *not* the same as the const number assigned to the value.
func (v Sweet) Ordinal() int {
	switch v {
	case Mars:
		return 0
	case Bounty:
		return 1
	case Snickers:
		return 2
	case Kitkat:
		return 3
	case Dairy_Milk:
		return 4
	}
	return -1
}
`

const ordinal_with_prefix = `
// Ordinal returns the ordinal number of a Sweet. This is an integer counting
// from zero. It is *not* the same as the const number assigned to the value.
func (v Sweet) Ordinal() int {
	switch v {
	case AMarsBar:
		return 0
	case ABountyBar:
		return 1
	case ASnickersBar:
		return 2
	case AKitkatBar:
		return 3
	case ADairy_MilkBar:
		return 4
	}
	return -1
}
`

func TestWriteOrdinalMethod(t *testing.T) {
	testStage(t, unsnake(basicModel()).writeOrdinalMethod, ordinal_no_prefix)
	testStage(t, floatModelWithPrefixes().writeOrdinalMethod, ordinal_with_prefix)
}

//-------------------------------------------------------------------------------------------------

const int_nc = `
// Int returns the int value, which is not necessarily the same as the ordinal.
// This facilitates polymorphism (see enum.IntEnum).
func (v Sweet) Int() int {
	return int(v)
}
`

const float_lc = `
// Float returns the float64 value. It serves to facilitate polymorphism (see enum.FloatEnum).
func (v Sweet) Float() float64 {
	return float64(v)
}
`

func TestWriteBaseMethod(t *testing.T) {
	testStage(t, basicModel().writeBaseMethod, int_nc)
	testStage(t, floatModelWithPrefixes().writeBaseMethod, float_lc)
}

//-------------------------------------------------------------------------------------------------

const SweetOf_no_prefix = `
// SweetOf returns a Sweet based on an ordinal number. This is the inverse of Ordinal.
// If the ordinal is out of range, an invalid Sweet is returned.
func SweetOf(v int) Sweet {
	if 0 <= v && v < len(AllSweets) {
		return AllSweets[v]
	}
	// an invalid result
	return Mars + Bounty + Snickers + Kitkat + Dairy_Milk + 1
}
`

const SweetOf_with_prefix = `
// SweetOf returns a Sweet based on an ordinal number. This is the inverse of Ordinal.
// If the ordinal is out of range, an invalid Sweet is returned.
func SweetOf(v int) Sweet {
	if 0 <= v && v < len(AllSweets) {
		return AllSweets[v]
	}
	// an invalid result
	return AMarsBar + ABountyBar + ASnickersBar + AKitkatBar + ADairy_MilkBar + 1
}
`

func TestWriteOfMethod(t *testing.T) {
	testStage(t, basicModel().writeOfMethod, SweetOf_no_prefix)
	testStage(t, floatModelWithPrefixes().writeOfMethod, SweetOf_with_prefix)
}

//-------------------------------------------------------------------------------------------------

const IsValid_all = `
// IsValid determines whether a Sweet is one of the defined constants.
func (v Sweet) IsValid() bool {
	return v.Ordinal() >= 0
}
`

func TestWriteIsValid(t *testing.T) {
	testStage(t, basicModel().writeIsValidMethod, IsValid_all)
	testStage(t, floatModelWithPrefixes().writeIsValidMethod, IsValid_all)
}

//-------------------------------------------------------------------------------------------------

const Parse_nc = `
// Parse parses a string to find the corresponding Sweet, accepting one of the string values or
// a number. The input representation is determined by sweetMarshalTextRep. It is used by AsSweet.
//
// Usage Example
//
//    v := new(Sweet)
//    err := v.Parse(s)
//    ...  etc
//
func (v *Sweet) Parse(s string) error {
	return v.parse(s, sweetMarshalTextRep)
}

func (v *Sweet) parse(in string, rep enum.Representation) error {
	if rep == enum.Ordinal {
		if v.parseOrdinal(in) {
			return nil
		}
	} else {
		if v.parseNumber(in) {
			return nil
		}
	}

	s := sweetTransformInput(in)

	if v.parseString(s, sweetEnumStrings, sweetEnumIndex[:]) {
		return nil
	}

	return errors.New(in + ": unrecognised sweet")
}
`

const Parse_lc = `
// Parse parses a string to find the corresponding Sweet, accepting one of the string values or
// a number. The input representation is determined by sweetMarshalTextRep. It is used by AsSweet.
//
// Usage Example
//
//    v := new(Sweet)
//    err := v.Parse(s)
//    ...  etc
//
func (v *Sweet) Parse(s string) error {
	return v.parse(s, sweetMarshalTextRep)
}

func (v *Sweet) parse(in string, rep enum.Representation) error {
	if rep == enum.Ordinal {
		if v.parseOrdinal(in) {
			return nil
		}
	} else {
		if v.parseNumber(in) {
			return nil
		}
	}

	s := sweetTransformInput(in)

	if v.parseString(s, sweetEnumStrings, sweetEnumIndex[:]) {
		return nil
	}

	return errors.New(in + ": unrecognised sweet")
}
`

const Parse_ic = `
// Parse parses a string to find the corresponding Sweet, accepting one of the string values or
// a number. The input representation is determined by sweetMarshalTextRep. It is used by AsSweet.
// The input case does not matter.
//
// Usage Example
//
//    v := new(Sweet)
//    err := v.Parse(s)
//    ...  etc
//
func (v *Sweet) Parse(s string) error {
	return v.parse(s, sweetMarshalTextRep)
}

func (v *Sweet) parse(in string, rep enum.Representation) error {
	if rep == enum.Ordinal {
		if v.parseOrdinal(in) {
			return nil
		}
	} else {
		if v.parseNumber(in) {
			return nil
		}
	}

	s := sweetTransformInput(in)

	if v.parseString(s, sweetEnumInputs, sweetEnumIndex[:]) {
		return nil
	}

	return errors.New(in + ": unrecognised sweet")
}
`

func TestWriteParseMethod(t *testing.T) {
	testParse(t, unsnake(basicModel()).writeParseMethod, "Parse", "Text", false, Parse_nc)
	testParse(t, aliasTable(floatModelWithPrefixes()).writeParseMethod, "Parse", "Enum", false, Parse_lc)
	testParse(t, ignoreCase(unsnake(basicModel())).writeParseMethod, "Parse", "Enum", true, Parse_ic)
}

//-------------------------------------------------------------------------------------------------

const parseHelpers_nc = `
// parseNumber attempts to convert a decimal value.
// Only numbers that correspond to the enumeration are valid.
func (v *Sweet) parseNumber(s string) (ok bool) {
	num, err := strconv.ParseInt(s, 10, 64)
	if err == nil {
		*v = Sweet(num)
		return v.IsValid()
	}
	return false
}

// parseOrdinal attempts to convert an ordinal value.
func (v *Sweet) parseOrdinal(s string) (ok bool) {
	ord, err := strconv.Atoi(s)
	if err == nil && 0 <= ord && ord < len(AllSweets) {
		*v = AllSweets[ord]
		return true
	}
	return false
}
`

const parseHelpers_lc = `
// parseNumber attempts to convert a decimal value.
// Only numbers that correspond to the enumeration are valid.
func (v *Sweet) parseNumber(s string) (ok bool) {
	num, err := strconv.ParseFloat(s, 64)
	if err == nil {
		*v = Sweet(num)
		return v.IsValid()
	}
	return false
}

// parseOrdinal attempts to convert an ordinal value.
func (v *Sweet) parseOrdinal(s string) (ok bool) {
	ord, err := strconv.Atoi(s)
	if err == nil && 0 <= ord && ord < len(AllSweets) {
		*v = AllSweets[ord]
		return true
	}
	return false
}
`

const parseHelpers_ic = `
// parseNumber attempts to convert a decimal value.
// Any number is allowed, even if the result is invalid.
func (v *Sweet) parseNumber(s string) (ok bool) {
	num, err := strconv.ParseInt(s, 10, 64)
	if err == nil {
		*v = Sweet(num)
		return true
	}
	return false
}

// parseOrdinal attempts to convert an ordinal value.
func (v *Sweet) parseOrdinal(s string) (ok bool) {
	ord, err := strconv.Atoi(s)
	if err == nil && 0 <= ord && ord < len(AllSweets) {
		*v = AllSweets[ord]
		return true
	}
	return false
}
`

func TestWriteParseHelperMethods(t *testing.T) {
	testStage(t, unsnake(basicModel()).writeParseHelperMethods, parseHelpers_nc)
	testStage(t, aliasTable(floatModelWithPrefixes()).writeParseHelperMethods, parseHelpers_lc)
	testStage(t, lenient(ignoreCase(unsnake(basicModel()))).writeParseHelperMethods, parseHelpers_ic)
}

//-------------------------------------------------------------------------------------------------

const transformInput_nc = `
// sweetTransformInput may alter input strings before they are parsed.
// This function is pluggable and is initialised using command-line flags
// -ic -lc -uc -unsnake.
var sweetTransformInput = func(in string) string {
	return in
}
`

const transformInput_lc = `
// sweetTransformInput may alter input strings before they are parsed.
// This function is pluggable and is initialised using command-line flags
// -ic -lc -uc -unsnake.
var sweetTransformInput = func(in string) string {
	return strings.ToLower(in)
}
`

const transformInput_uc_unsnake = `
// sweetTransformInput may alter input strings before they are parsed.
// This function is pluggable and is initialised using command-line flags
// -ic -lc -uc -unsnake.
var sweetTransformInput = func(in string) string {
	return strings.ToUpper(strings.ReplaceAll(in, "_", " "))
}
`

func TestWriteTransformInputMethod(t *testing.T) {
	testStage(t, basicModel().writeTransformInputFunction, transformInput_nc)
	testStage(t, ignoreCase(basicModel()).writeTransformInputFunction, transformInput_lc)
	testStage(t, lowerCase(basicModel()).writeTransformInputFunction, transformInput_lc)
	testStage(t, upperCase(unsnake(basicModel())).writeTransformInputFunction, transformInput_uc_unsnake)
}

//-------------------------------------------------------------------------------------------------

const parseString_nc = `
func (v *Sweet) parseString(s string, concats string, indexes []uint16) (ok bool) {
	var i0 uint16 = 0

	for j := 1; j < len(indexes); j++ {
		i1 := indexes[j]
		p := concats[i0:i1]
		if s == p {
			*v = AllSweets[j-1]
			return true
		}
		i0 = i1
	}
	return false
}
`

const parseString_aliasTable = `
func (v *Sweet) parseString(s string, concats string, indexes []uint16) (ok bool) {
	var i0 uint16 = 0

	for j := 1; j < len(indexes); j++ {
		i1 := indexes[j]
		p := concats[i0:i1]
		if s == p {
			*v = AllSweets[j-1]
			return true
		}
		i0 = i1
	}
	*v, ok = sweetAlias[s]
	return ok
}
`

func TestWriteParseIdentifierMethod(t *testing.T) {
	testStage(t, unsnake(basicModel()).writeParseIdentifierMethod, parseString_nc)
	testStage(t, modelWithStructTags().writeParseIdentifierMethod, parseString_aliasTable)
	testStage(t, ignoreCase(modelWithStructTags()).writeParseIdentifierMethod, parseString_aliasTable)
}

//-------------------------------------------------------------------------------------------------

const AsSweet_nc = `
// AsSweet parses a string to find the corresponding Sweet, accepting either one of the string values or
// a number. The input representation is determined by sweetMarshalTextRep. It wraps Parse.
func AsSweet(s string) (Sweet, error) {
	var v = new(Sweet)
	err := v.Parse(s)
	return *v, err
}
`

const AsSweet_lc = `
// AsSweet parses a string to find the corresponding Sweet, accepting either one of the string values or
// a number. The input representation is determined by sweetMarshalTextRep. It wraps Parse.
func AsSweet(s string) (Sweet, error) {
	var v = new(Sweet)
	err := v.Parse(s)
	return *v, err
}
`

const AsSweet_ic = `
// AsSweet parses a string to find the corresponding Sweet, accepting either one of the string values or
// a number. The input representation is determined by sweetMarshalTextRep. It wraps Parse.
// The input case does not matter.
func AsSweet(s string) (Sweet, error) {
	var v = new(Sweet)
	err := v.Parse(s)
	return *v, err
}
`

func TestWriteAsMethod(t *testing.T) {
	testStage(t, unsnake(basicModel()).writeAsMethod, AsSweet_nc)
	testStage(t, floatModelWithPrefixes().writeAsMethod, AsSweet_lc)
	testStage(t, ignoreCase(unsnake(basicModel())).writeAsMethod, AsSweet_ic)
}

//-------------------------------------------------------------------------------------------------

const MustParseSweet_nc = `
// MustParseSweet is similar to AsSweet except that it panics on error.
func MustParseSweet(s string) Sweet {
	v, err := AsSweet(s)
	if err != nil {
		panic(err)
	}
	return v
}
`

const MustParseSweet_ic = `
// MustParseSweet is similar to AsSweet except that it panics on error.
// The input case does not matter.
func MustParseSweet(s string) Sweet {
	v, err := AsSweet(s)
	if err != nil {
		panic(err)
	}
	return v
}
`

func TestWriteMustParseMethod(t *testing.T) {
	testStage(t, unsnake(basicModel()).writeMustParseMethod, MustParseSweet_nc)
	testStage(t, ignoreCase(unsnake(basicModel())).writeMustParseMethod, MustParseSweet_ic)
}

//-------------------------------------------------------------------------------------------------

const MarshalText_identifier = `
// MarshalText converts values to a form suitable for transmission via XML, JSON etc.
// The identifier representation is chosen according to -marshaltext.
func (v Sweet) MarshalText() (text []byte, err error) {
	if !v.IsValid() {
		return v.marshalNumberOrError()
	}

	return []byte(v.String()), nil
}
`

const MarshalText_number = `
// MarshalText converts values to a form suitable for transmission via XML, JSON etc.
// The number representation is chosen according to -marshaltext.
func (v Sweet) MarshalText() (text []byte, err error) {
	if !v.IsValid() {
		return v.marshalNumberOrError()
	}

	return sweetMarshalNumber(v)
}
`

const MarshalText_ordinal = `
// MarshalText converts values to a form suitable for transmission via XML, JSON etc.
// The ordinal representation is chosen according to -marshaltext.
func (v Sweet) MarshalText() (text []byte, err error) {
	if !v.IsValid() {
		return nil, v.errmsg()
	}

	return v.marshalOrdinal()
}
`
const MarshalText_struct_tags = `
// MarshalText converts values to bytes suitable for transmission via XML, JSON etc.
// The representation is chosen according to 'text' struct tags.
func (v Sweet) MarshalText() ([]byte, error) {
	o := v.Ordinal()
	if o < 0 {
		return v.marshalNumberOrError()
	}
	s := sweetTextStrings[sweetTextIndex[o]:sweetTextIndex[o+1]]
	return s, nil
}
`

func TestWriteMarshalText(t *testing.T) {
	testStage(t, basicModel().writeMarshalText, "")
	testStage(t, text(basicModel(), enum.Identifier).writeMarshalText, MarshalText_identifier)
	testStage(t, text(basicModel(), enum.Number).writeMarshalText, MarshalText_number)
	testStage(t, text(basicModel(), enum.Ordinal).writeMarshalText, MarshalText_ordinal)
	testStage(t, text(floatModelWithPrefixes(), enum.Identifier).writeMarshalText, MarshalText_identifier)
	testStage(t, text(floatModelWithPrefixes(), enum.Number).writeMarshalText, MarshalText_number)
	testStage(t, text(floatModelWithPrefixes(), enum.Ordinal).writeMarshalText, MarshalText_ordinal)
	testStage(t, modelWithStructTags().writeMarshalText, MarshalText_struct_tags)
}

const MarshalJSON_struct_tags = `
// MarshalJSON converts values to bytes suitable for transmission via JSON.
// The representation is chosen according to -marshaljson.
func (v Sweet) MarshalJSON() ([]byte, error) {
	o := v.Ordinal()
	if o < 0 {
		if sweetMarshalTextRep == enum.Ordinal {
			return nil, fmt.Errorf("%v is out of range", v)
		}
		return sweetMarshalNumber(v)
	}
	s := sweetJSONStrings[sweetJSONIndex[o]:sweetJSONIndex[o+1]]
	return enum.QuotedString(s), nil
}
`

const sweetMarshalText = `
func (v Sweet) marshalText(rep enum.Representation, quoted bool) (text []byte, err error) {
	if rep != enum.Ordinal && !v.IsValid() {
		return sweetMarshalNumber(v)
	}

	var bs []byte
	switch rep {
	case enum.Number:
		return sweetMarshalNumber(v)
	case enum.Ordinal:
		return v.marshalOrdinal()
	case enum.Tag:
		if quoted {
			bs = enum.QuotedString(v.Tag())
		} else {
			bs = []byte(v.Tag())
		}
	default:
		if quoted {
			bs = enum.QuotedString(v.String())
		} else {
			bs = []byte(v.String())
		}
	}
	return bs, nil
}
`

const sweetMarshalNumber_float = `
// sweetMarshalNumber handles marshaling where a number is required or where
// the value is out of range but sweetMarshalTextRep != enum.Ordinal.
// This function can be replaced with any bespoke function than matches signature.
var sweetMarshalNumber = func(v Sweet) (text []byte, err error) {
	bs := []byte(strconv.FormatFloat(float64(v), 'g', 7, 64))
	return bs, nil
}
`

const sweetMarshalNumber_int = `
// sweetMarshalNumber handles marshaling where a number is required or where
// the value is out of range but sweetMarshalTextRep != enum.Ordinal.
// This function can be replaced with any bespoke function than matches signature.
var sweetMarshalNumber = func(v Sweet) (text []byte, err error) {
	bs := []byte(strconv.FormatInt(int64(v), 10))
	return bs, nil
}
`

const sweetMarshalOrdinal = `
func (v Sweet) marshalOrdinal() (text []byte, err error) {
	bs := []byte(strconv.Itoa(v.Ordinal()))
	return bs, nil
}
`

func TestWriteMarshalJSON(t *testing.T) {
	//testStage(t, basicModel().writeMarshalText, marshalText_identifier+
	//	sweetMarshalText+sweetMarshalNumber_int+sweetMarshalOrdinal)
	//testStage(t, floatModelWithPrefixes().writeMarshalText, marshalText_identifier+
	//	sweetMarshalText+sweetMarshalNumber_float+sweetMarshalOrdinal)
	//testStage(t, modelWithStructTags().writeMarshalText, marshalJSON_struct_tags+
	//	sweetMarshalText+sweetMarshalNumber_int+sweetMarshalOrdinal)
	//testStage(t, ignoreCase(modelWithStructTags()).writeMarshalText, marshalJSON_struct_tags+
	//	sweetMarshalText+sweetMarshalNumber_int+sweetMarshalOrdinal)
}

//-------------------------------------------------------------------------------------------------

const UnmarshalText_all = `
// UnmarshalText converts transmitted values to ordinary values.
func (v *Sweet) UnmarshalText(text []byte) error {
	return v.Parse(string(text))
}

// UnmarshalJSON converts transmitted JSON values to ordinary values. It allows both
// ordinals and strings to represent the values.
func (v *Sweet) UnmarshalJSON(text []byte) error {
	s := string(text)
	if s == "null" {
		// Ignore null, like in the main JSON package.
		return nil
	}
	s = strings.Trim(s, "\"")
	return v.unmarshalJSON(s)
}
`

func TestWriteUnmarshalText(t *testing.T) {
	testStage(t, unsnake(basicModel()).writeUnmarshalText, UnmarshalText_all)
	testStage(t, floatModelWithPrefixes().writeUnmarshalText, UnmarshalText_all)
}

//-------------------------------------------------------------------------------------------------

const unmarshalJSON_short = `
func (v *Sweet) unmarshalJSON(s string) error {
	return v.Parse(s)
}
`

const unmarshalJSON_nc = `
func (v *Sweet) unmarshalJSON(in string) error {
	if v.parseNumber(in) {
		return nil
	}

	s := sweetTransformInput(in)

	if v.parseString(s, sweetJSONStrings, sweetJSONIndex[:]) {
		return nil
	}

	if v.parseString(s, sweetEnumStrings, sweetEnumIndex[:]) {
		return nil
	}

	var ok bool
	*v, ok = sweetAlias[s]
	if ok {
		return nil
	}

	return errors.New(in + ": unrecognised sweet")
}
`

const unmarshalJSON_ic = `
func (v *Sweet) unmarshalJSON(in string) error {
	if v.parseNumber(in) {
		return nil
	}

	s := sweetTransformInput(in)

	if v.parseString(s, sweetJSONInputs, sweetJSONIndex[:]) {
		return nil
	}

	if v.parseString(s, sweetEnumInputs, sweetEnumIndex[:]) {
		return nil
	}

	var ok bool
	*v, ok = sweetAlias[s]
	if ok {
		return nil
	}

	return errors.New(in + ": unrecognised sweet")
}
`

func TestWriteUnmarshalJSON(t *testing.T) {
	testStage(t, unsnake(basicModel()).writeUnmarshalJSON, unmarshalJSON_short)
	testStage(t, modelWithStructTags().writeUnmarshalJSON, unmarshalJSON_nc)
	testStage(t, ignoreCase(modelWithStructTags()).writeUnmarshalJSON, unmarshalJSON_ic)
}

//-------------------------------------------------------------------------------------------------

const Scan_identifier_nc = `
// Scan parses some value, which can be a number, a string or []byte.
// It implements sql.Scanner, https://golang.org/pkg/database/sql/#Scanner
func (v *Sweet) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var s string
	switch x := value.(type) {
	case int64:
		*v = Sweet(x)
		return nil
	case float64:
		*v = Sweet(x)
		return nil
	case []byte:
		s = string(x)
	case string:
		s = x
	default:
		return fmt.Errorf("%T %+v is not a meaningful sweet", value, value)
	}

	return v.parse(s, enum.Identifier)
}
`

const Scan_number_nc = `
// Scan parses some value, which can be a number, a string or []byte.
// It implements sql.Scanner, https://golang.org/pkg/database/sql/#Scanner
func (v *Sweet) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var s string
	switch x := value.(type) {
	case int64:
		*v = Sweet(x)
		return nil
	case float64:
		*v = Sweet(x)
		return nil
	case []byte:
		s = string(x)
	case string:
		s = x
	default:
		return fmt.Errorf("%T %+v is not a meaningful sweet", value, value)
	}

	return v.parse(s, enum.Number)
}
`

const Scan_identifier_lc = `
// Scan parses some value, which can be a number, a string or []byte.
// It implements sql.Scanner, https://golang.org/pkg/database/sql/#Scanner
func (v *Sweet) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var s string
	switch x := value.(type) {
	case int64:
		*v = Sweet(x)
		return nil
	case float64:
		*v = Sweet(x)
		return nil
	case []byte:
		s = string(x)
	case string:
		s = x
	default:
		return fmt.Errorf("%T %+v is not a meaningful sweet", value, value)
	}

	return v.parse(s, enum.Identifier)
}
`

const Scan_struct_tags = `
// Scan parses some value, which can be a number, a string or []byte.
// It implements sql.Scanner, https://golang.org/pkg/database/sql/#Scanner
func (v *Sweet) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var s string
	switch x := value.(type) {
	case int64:
		*v = Sweet(x)
		return nil
	case float64:
		*v = Sweet(x)
		return nil
	case []byte:
		s = string(x)
	case string:
		s = x
	default:
		return fmt.Errorf("%T %+v is not a meaningful sweet", value, value)
	}

	if v.parseString(s, sweetSQLStrings, sweetSQLIndex[:]) {
		return nil
	}

	return errors.New(s + ": unrecognised sweet")
}
`

func TestWriteScanMethod(t *testing.T) {
	testStage(t, basicModel().writeScanMethod, "")
	testStage(t, store(basicModel(), enum.Identifier).writeScanMethod, Scan_identifier_nc)
	testStage(t, store(basicModel(), enum.Number).writeScanMethod, Scan_number_nc)
	testStage(t, store(floatModelWithPrefixes(), enum.Identifier).writeScanMethod, Scan_identifier_lc)
	testStage(t, modelWithStructTags().writeScanMethod, Scan_struct_tags)
	testStage(t, ignoreCase(modelWithStructTags()).writeScanMethod, Scan_struct_tags)
}

//-------------------------------------------------------------------------------------------------

const Value_identifier = `
// Value converts the Sweet to a string.
// It implements driver.Valuer, https://golang.org/pkg/database/sql/driver/#Valuer
func (v Sweet) Value() (driver.Value, error) {
	if !v.IsValid() {
		return nil, fmt.Errorf("%v: cannot be stored", v)
	}

	return v.String(), nil
}
`

const Value_ordinal = `
// Value converts the Sweet to a string.
// It implements driver.Valuer, https://golang.org/pkg/database/sql/driver/#Valuer
func (v Sweet) Value() (driver.Value, error) {
	if !v.IsValid() {
		return nil, fmt.Errorf("%v: cannot be stored", v)
	}

	return int64(v.Ordinal()), nil
}
`

const Value_number_int = `
// Value converts the Sweet to a string.
// It implements driver.Valuer, https://golang.org/pkg/database/sql/driver/#Valuer
func (v Sweet) Value() (driver.Value, error) {
	return int64(v), nil
}
`

const Value_number_float = `
// Value converts the Sweet to a string.
// It implements driver.Valuer, https://golang.org/pkg/database/sql/driver/#Valuer
func (v Sweet) Value() (driver.Value, error) {
	return float64(v), nil
}
`

const Value_struct_tags = `
// Value converts the Sweet to a string.
// The representation is chosen according to 'sql' struct tags.
// It implements driver.Valuer, https://golang.org/pkg/database/sql/driver/#Valuer
func (v Sweet) Value() (driver.Value, error) {
	if !v.IsValid() {
		return nil, fmt.Errorf("%v: cannot be stored", v)
	}

	return v.toString(sweetSQLStrings, sweetSQLIndex[:]), nil
}
`

func TestWriteValueMethod(t *testing.T) {
	testStage(t, basicModel().writeValueMethod, "")
	testStage(t, store(basicModel(), enum.Identifier).writeValueMethod, Value_identifier)
	testStage(t, store(basicModel(), enum.Ordinal).writeValueMethod, Value_ordinal)
	testStage(t, store(basicModel(), enum.Number).writeValueMethod, Value_number_int)
	testStage(t, store(floatModelWithPrefixes(), enum.Number).writeValueMethod, Value_number_float)
	testStage(t, modelWithStructTags().writeValueMethod, Value_struct_tags)
	testStage(t, ignoreCase(modelWithStructTags()).writeValueMethod, Value_struct_tags)
}

//-------------------------------------------------------------------------------------------------

func testParse(t *testing.T, fn func(io.Writer, string, string, bool), s1, s2 string, b bool, expected string) {
	t.Helper()
	buf := strings.Builder{}
	fn(&buf, s1, s2, b)
	compare(t, buf.String(), expected)
}

func testStage(t *testing.T, fn func(io.Writer), expected string) {
	t.Helper()
	buf := strings.Builder{}
	fn(&buf)
	compare(t, buf.String(), expected)
}

func compare(t *testing.T, actual, expected string) {
	t.Helper()
	a := strings.Split(actual, "\n")
	b := strings.Split(expected, "\n")
	n := len(a)
	if n > len(b) {
		n = len(b)
	}
	ok := true
	for i := 0; i < n; i++ {
		if ok && a[i] != b[i] {
			ap, an, bp, bn := "", "", "", ""
			if i > 0 {
				ap = a[i-1]
				bp = b[i-1]
			}
			if i < n-1 {
				an = a[i+1]
				bn = b[i+1]
			}
			t.Errorf("Line %d\n--\n  %s\na:%s\n  %s\n--\n  %s\ne:%s\n  %s\n--", i+1, ap, a[i], an, bp, b[i], bn)
			ok = false
		}
	}
	if !ok {
		t.Logf("Actual:\n%s", actual)
	}

	if len(a) > len(b) {
		t.Errorf("Actual has %d more lines than expected.\n%s", len(a)-len(b), actual)
	} else if len(a) < len(b) {
		t.Errorf("Actual has %d fewer lines than expected.\n%s", len(b)-len(a), actual)
	}
}

//-------------------------------------------------------------------------------------------------

func basicModel() Model {
	Prefix = ""
	Suffix = ""
	return Model{
		Config: Config{
			MainType: "Sweet",
			Plural:   "Sweets",
			Pkg:      "confectionary",
		},
		LcType:   "sweet",
		BaseType: "int",
		Version:  util.Version,
		Values:   ValuesOf("Mars", "Bounty", "Snickers", "Kitkat", "Dairy_Milk"),
		Extra:    make(map[string]interface{}),
	}
}

func floatModelWithPrefixes() Model {
	Prefix = "A"
	Suffix = "Bar"
	return Model{
		Config: Config{
			MainType: "Sweet",
			Plural:   "Sweets",
			Pkg:      "confectionary",
		},
		LcType:   "sweet",
		BaseType: "float64",
		Version:  util.Version,
		Values:   ValuesOf("AMarsBar", "ABountyBar", "ASnickersBar", "AKitkatBar", "ADairy_MilkBar"),
		Extra:    make(map[string]interface{}),
	}
}

func modelWithStructTags() Model {
	Prefix = ""
	Suffix = ""
	var values Values
	values = values.Append("Mars", `text:"tm" json:"mmm" sql:"m"`)
	values = values.Append("Bounty", `text:"tb" json:"bbb" sql:"b"`)
	values = values.Append("Snickers", `text:"ts" json:"sss" sql:"s"`)
	values = values.Append("Kitkat", `text:"tk" json:"kkk" sql:"k"`)
	values = values.Append("Dairy_Milk", `text:"td" json:"ddd" sql:"d"`)
	return Model{
		Config: Config{
			MainType: "Sweet",
			Plural:   "Sweets",
			Pkg:      "confectionary",
		},
		LcType:     "sweet",
		BaseType:   "int",
		Version:    util.Version,
		Values:     values,
		AliasTable: "sweetAlias",
		Extra:      make(map[string]interface{}),
	}
}

func ignoreCase(m Model) Model {
	m.IgnoreCase = true
	return m
}

func unsnake(m Model) Model {
	m.Unsnake = true
	return m
}

func lowerCase(m Model) Model {
	m.Case = transform.Lower
	return m
}

func upperCase(m Model) Model {
	m.Case = transform.Upper
	return m
}

func aliasTable(m Model) Model {
	m.AliasTable = "sweetAlias"
	return m
}

func lenient(m Model) Model {
	m.Lenient = true
	return m
}

func text(m Model, rep enum.Representation) Model {
	m.MarshalTextRep = rep
	return m
}

func json(m Model, rep enum.Representation) Model {
	m.MarshalJSONRep = rep
	return m
}

func store(m Model, rep enum.Representation) Model {
	m.StoreRep = rep
	return m
}
